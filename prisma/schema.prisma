// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  name          String
  role          UserRole  @default(STAFF)
  createdAt     DateTime  @default(now()) @map("created_at")
  lastLogin     DateTime? @map("last_login")
  platformConnections PlatformConnection[]
  inventoryHistory    InventoryHistory[]
  notifications       Notification[]
  notificationPreferences NotificationPreference[]

  @@index([email])
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

model Product {
  id          String    @id @default(uuid())
  sku         String    @unique
  name        String
  description String?
  categoryId  String    @map("category_id")
  category    Category  @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([sku])
  @@index([categoryId])
  @@map("products")
}

model ProductVariant {
  id          String    @id @default(uuid())
  productId   String    @map("product_id")
  product     Product   @relation(fields: [productId], references: [id])
  sku         String    @unique
  attributes  Json
  inventory   Inventory?
  inventoryHistory InventoryHistory[]
  platformInventory PlatformInventory[]
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([productId])
  @@index([sku])
  @@map("product_variants")
}

model Category {
  id          String    @id
  name        String
  parentId    String?   @map("parent_id")
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([parentId])
  @@map("categories")
}

model Inventory {
  id                  String    @id @default(uuid())
  variantId           String    @unique @map("variant_id")
  variant             ProductVariant @relation(fields: [variantId], references: [id])
  quantity            Int       @default(0)
  lowStockThreshold   Int?      @map("low_stock_threshold")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@index([variantId])
  @@map("inventory")
}

model InventoryHistory {
  id              String    @id @default(uuid())
  variantId       String    @map("variant_id")
  variant         ProductVariant @relation(fields: [variantId], references: [id])
  quantityChange  Int       @map("quantity_change")
  quantityAfter   Int       @map("quantity_after")
  reason          String?
  userId          String    @map("user_id")
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now()) @map("created_at")

  @@index([variantId])
  @@index([userId])
  @@index([createdAt])
  @@map("inventory_history")
}

model PlatformConnection {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  user            User      @relation(fields: [userId], references: [id])
  platformType    String    @map("platform_type")
  credentials     String    // Encrypted JSON
  status          String
  lastSync        DateTime? @map("last_sync")
  platformInventory PlatformInventory[]
  orders          Order[]
  createdAt       DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([platformType])
  @@map("platform_connections")
}

model PlatformInventory {
  id                  String    @id @default(uuid())
  variantId           String    @map("variant_id")
  variant             ProductVariant @relation(fields: [variantId], references: [id])
  platformConnectionId String    @map("platform_connection_id")
  platformConnection  PlatformConnection @relation(fields: [platformConnectionId], references: [id])
  externalId          String    @map("external_id")
  quantity            Int
  lastUpdated         DateTime  @updatedAt @map("last_updated")

  @@index([variantId])
  @@index([platformConnectionId])
  @@index([externalId])
  @@map("platform_inventory")
}

model Order {
  id                  String    @id @default(uuid())
  platformConnectionId String    @map("platform_connection_id")
  platformConnection  PlatformConnection @relation(fields: [platformConnectionId], references: [id])
  externalOrderId     String    @map("external_order_id")
  orderDate           DateTime  @map("order_date")
  status              String
  totalAmount         Decimal   @map("total_amount")
  items               OrderItem[]
  createdAt           DateTime  @default(now()) @map("created_at")

  @@index([platformConnectionId])
  @@index([externalOrderId])
  @@index([orderDate])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id          String    @id @default(uuid())
  orderId     String    @map("order_id")
  order       Order     @relation(fields: [orderId], references: [id])
  variantId   String    @map("variant_id")
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  quantity    Int
  price       Decimal

  @@index([orderId])
  @@index([variantId])
  @@map("order_items")
}

model Notification {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  type        String
  message     String
  isRead      Boolean   @default(false) @map("is_read")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  user            User      @relation(fields: [userId], references: [id])
  notificationType String    @map("notification_type")
  emailEnabled    Boolean   @default(true) @map("email_enabled")
  inAppEnabled    Boolean   @default(true) @map("in_app_enabled")

  @@index([userId])
  @@index([notificationType])
  @@map("notification_preferences")
}
